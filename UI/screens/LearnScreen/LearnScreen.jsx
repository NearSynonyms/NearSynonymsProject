import React, { useState, useEffect } from "react";
import { View, ImageBackground, TouchableOpacity, Image } from "react-native";
import { Txt } from "../../components/Txt/Txt";
import { s } from "./LearnScreen.style";
import Popup from "../../components/popup/Popup";
import Tutorial from "../../GameLogic/Tutorial";
import Loading from "../../components/loading/Loading";
import {
  playBackgroundMusic,
  stopBackgroundMusic,
  sounds,
  playSoundEffect,
  setBackgroundMusicVolume,
} from "../../sounds/SoundManager";
import { getExplanation } from "../../AI/AIServices";
export default function LearnScreen({ route, navigation }) {
  const { learnBackground, exitIcon, homeLogo, chatGPTLogo, user } =
    route.params;
  const [currentIndexPage, setCurrentIndexPage] = useState(0);
  const [popupVisible, setPopupVisible] = useState(true);
  const [popupTitle, setPopupTitle] = useState("");
  const [popupContent, setPopupContent] = useState("");
  const [question, setQuestion] = useState(null);
  const [selectedAnswer, setSelectedAnswer] = useState(null);
  const [isAnswerCorrect, setIsAnswerCorrect] = useState(null);
  const [displayFullSentence, setDisplayFullSentence] = useState(false);
  const [firstWord, setFirstWord] = useState("");
  const [secondWord, setSecondWord] = useState("");
  const [explanation, setExplanation] = useState("");
  const [buttonsDisabled, setButtonsDisabled] = useState(false);

  const initializeTutorial = async () => {
    const tutorial = new Tutorial(user);
    await tutorial.init();
    const question = tutorial.getQuestion();
    if (question) {
      setQuestion(question);
      setFirstWord(capitalizeFirstLetter(question.first_word));
      setSecondWord(capitalizeFirstLetter(question.second_word));
      setSelectedAnswer(null);
      setIsAnswerCorrect(null);
      setDisplayFullSentence(false);
    } else {
      console.error("No valid question available.");
    }
  };
  useEffect(() => {
    initializeTutorial();
    stopBackgroundMusic();
    playBackgroundMusic(sounds.tutorialBackground);

    return () => {
      stopBackgroundMusic();
      playBackgroundMusic(sounds.homeBackground);
    };
  }, [user.id]);

  useEffect(() => {
    if (firstWord && secondWord) {
      switch (currentIndexPage) {
        case 0:
          setPopupTitle("Welcome");
          setPopupContent(
            `Welcome to your learning session.\nIn this screen, you are going to learn about the next two words:\n${firstWord} and ${secondWord}.\nFor each word, you will learn when to correctly use the appropriate word in a sentence.`
          );
          break;
        case 1:
          setPopupTitle("Question Time");
          setPopupContent(
            "Now, you will be asked to choose the correct word to complete the sentence based on what you learned."
          );
          break;
        case 2:
          setPopupTitle("Learn With AI");
          setPopupContent(
            `On the next screen, we'll provide you with an explanation to help you understand why your choice was ${
              isAnswerCorrect ? "correct" : "incorrect"
            } .\nThis feedback is generated by AI and is designed to guide you in mastering the nuances of word usage.`
          );
          break;
        default:
          setPopupTitle("Notice");
          setPopupContent("");
      }
    }
  }, [currentIndexPage, firstWord, secondWord]);
  useEffect(() => {
    if (currentIndexPage === 2 && selectedAnswer) {
      const correctSentence = question.sentence;
      const correctWord = question.correct_word;
      const incorrectWord = findWrongWord(
        question.sentence,
        question.first_word,
        question.second_word
      );
      const wrongSentence = replaceWordInSentence(
        correctSentence,
        correctWord,
        incorrectWord
      );

      getExplanation(
        correctSentence,
        wrongSentence,
        correctWord,
        incorrectWord
      ).then((explanation) => {
        setExplanation(explanation);
      });
    }
  }, [currentIndexPage, selectedAnswer]);

  const handleNext = () => {
    setPopupVisible(true); // Show the popup again when navigating to the next screen
    setCurrentIndexPage((prevIndex) => prevIndex + 1);
  };

  const capitalizeFirstLetter = (string) => {
    if (string.length === 0) return "";
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  const handleButtonPress = async (answer) => {
    if (buttonsDisabled) return;
    setButtonsDisabled(true);
    setSelectedAnswer(answer);
    setDisplayFullSentence(true);
    await setBackgroundMusicVolume(0.3);
    if (answer === question.correct_word) {
      setIsAnswerCorrect(true);
      await playSoundEffect(sounds.correctAnswer);
    } else {
      setIsAnswerCorrect(false);
      await playSoundEffect(sounds.incorrectAnswer);
    }
    setTimeout(async () => {
      await setBackgroundMusicVolume(0.7);
    }, 500);
    setTimeout(() => {
      handleNext();
    }, 2000);
  };

  const getButtonStyle = (answer) => {
    if (selectedAnswer === answer) {
      return isAnswerCorrect
        ? [s.optionButton, { borderWidth: 2, borderColor: "#22ff00" }]
        : [s.optionButton, { borderWidth: 2, borderColor: "#d10909" }];
    }
    return s.optionButton;
  };

  const fullSentenceStyle = (sentence, correctWord) => {
    const parts = sentence.split(correctWord);
    return (
      <Txt style={s.questionTxt}>
        {parts[0]}
        <Txt style={{ color: "#96efffff", fontWeight: "bold" }}>
          {correctWord}
        </Txt>
        {parts[1]}
      </Txt>
    );
  };

  function replaceWordInSentence(sentence, oldWord, newWord) {
    const regex = new RegExp(`\\b${oldWord}\\b`);
    return sentence.replace(regex, newWord);
  }

  function findWrongWord(sentence, word1, word2) {
    const word1Exists = sentence.includes(word1);
    const word2Exists = sentence.includes(word2);
    if (!word1Exists) {
      return word1;
    } else if (!word2Exists) {
      return word2;
    } else {
      return null;
    }
  }

  if (!question) {
    return <Loading backgroundImg={learnBackground} homeLogo={homeLogo} />;
  }

  const renderScreen = () => {
    switch (currentIndexPage) {
      case 0:
        return (
          <View style={s.pageContainer}>
            <View style={s.exampleContainer}>
              <Txt style={s.wordText}>{firstWord}</Txt>
              <Txt style={s.introductionText}>
                In the following sentence, the word{" "}
                <Txt style={{ color: "#22ff00", fontSize: 18 }}>
                  {question.first_word}
                </Txt>{" "}
                is more appropriate than the word{" "}
                <Txt style={{ color: "#d10909", fontSize: 18 }}>
                  {question.second_word}
                </Txt>
                :
              </Txt>
              <Txt style={s.sentenceText}>{question.first_sentence}</Txt>
            </View>
            <View style={s.exampleContainer}>
              <Txt style={s.wordText}>{secondWord}</Txt>
              <Txt style={s.introductionText}>
                In the following sentence, the word{" "}
                <Txt style={{ color: "#22ff00", fontSize: 18 }}>
                  {question.second_word}
                </Txt>{" "}
                is more appropriate than the word{" "}
                <Txt style={{ color: "#d10909", fontSize: 18 }}>
                  {question.first_word}
                </Txt>
                :
              </Txt>
              <Txt style={s.sentenceText}>{question.second_sentence}</Txt>
            </View>
            <TouchableOpacity
              onPress={() => {
                playSoundEffect(sounds.buttonClick);
                handleNext();
              }}
              style={s.nextButton}
            >
              <Txt style={s.nextButtonText}>Next</Txt>
            </TouchableOpacity>
          </View>
        );
      case 1:
        return (
          <View style={s.questionContainer}>
            <Txt style={s.questionText}>Which word fits in the sentence?</Txt>
            <Txt style={s.sentenceText}>
              {displayFullSentence ? (
                fullSentenceStyle(question.sentence, question.correct_word)
              ) : (
                <Txt style={s.questionTxt}>{question.partial_sentence}</Txt>
              )}
            </Txt>
            <View style={s.optionsContainer}>
              <TouchableOpacity
                style={getButtonStyle(question.first_word)}
                onPress={() => {
                  handleButtonPress(question.first_word);
                }}
                disabled={buttonsDisabled}
              >
                <Txt style={s.optionText}>{question.first_word}</Txt>
              </TouchableOpacity>
              <TouchableOpacity
                style={getButtonStyle(question.second_word)}
                onPress={() => {
                  handleButtonPress(question.second_word);
                }}
                disabled={buttonsDisabled}
              >
                <Txt style={s.optionText}>{question.second_word}</Txt>
              </TouchableOpacity>
            </View>
          </View>
        );
      case 2:
        return (
          <View style={s.explanationContainer}>
            <View style={s.gptTitle}>
              <Txt style={s.poweredByTxt}>Powered by OpenAI{"\n"}</Txt>
              <Image source={chatGPTLogo} style={s.poweredByImage}></Image>
            </View>
            <View style={s.content}>
              <Txt style={s.explanationText}>
                Explanation for why{" "}
                <Txt style={{ color: "#96efffff", fontSize: 18 }}>
                  {selectedAnswer}
                </Txt>{" "}
                is {isAnswerCorrect ? "correct" : "incorrect"}:{"\n"}
              </Txt>
              <Txt style={s.explanationText}>
                {explanation || "Generating explanation..."}
              </Txt>
            </View>
          </View>
        );

      default:
        return null;
    }
  };

  return (
    <ImageBackground style={s.img_background} source={learnBackground}>
      <TouchableOpacity
        style={s.exitButton}
        onPress={() => {
          playSoundEffect(sounds.buttonClick);
          navigation.goBack();
        }}
      >
        <View style={s.exitIconView}>
          <Image source={exitIcon} style={s.exitGameIcon} />
        </View>
      </TouchableOpacity>

      {renderScreen()}
      <Popup
        visible={popupVisible}
        onClose={() => setPopupVisible(false)}
        title={popupTitle}
        content={popupContent}
        backgroundColor="#275183"
        buttonTxt="Got It!"
      />
    </ImageBackground>
  );
}
